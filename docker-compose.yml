services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    restart: always
    container_name: campaign-api
    tty: true
    environment:
      HOST: "${API_INTERNAL_HOST}"
      PORT: "${API_INTERNAL_PORT}"
    ports:
      - "${API_EXTERNAL_PORT}:${API_INTERNAL_PORT}"
    volumes:
      - .:/opt/app/
    depends_on:
      psql:
        condition: service_healthy
    networks:
      - app-network 
  adminer:
    image: adminer
    container_name: adminer2
    ports:
      - "8080:8080"
    depends_on:
      - psql
    networks:
      - app-network  
  psql:
    image: postgres:latest
    restart: always
    container_name: campaign
    environment:
      - PGUSER=$POSTGRES_USER
      - PGDATABASE=$POSTGRES_DB
      - PGPASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - $POSTGRES_LOCAL_PORT:$POSTGRES_DOCKER_PORT
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "{$POSTGRES_DB}", "-U", "{$POSTGRES_USER}"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - app-network  
networks:
  app-network:  
    driver: bridge